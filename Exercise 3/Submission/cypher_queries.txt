// (a)
// 1
MATCH (n)-[:REGISTERED_ADDRESS]->(a:Address)
	RETURN DISTINCT(a.countries) AS country
	ORDER BY country;

// 2
MATCH (e:Entity)-[:REGISTERED_ADDRESS]->(a:Address)
	WHERE a.countries CONTAINS 'Albania'
	RETURN e.name, a.countries
	LIMIT 5;

// (b)
// 1
MATCH (i:Intermediary)-[:INTERMEDIARY_OF]->(n)
                RETURN i.name AS Name, COUNT(*) AS frequency
                ORDER BY frequency DESC LIMIT 10;
// 2
MATCH a=(i:Intermediary)-[:INTERMEDIARY_OF |:OFFICER_OF]->(n)
                RETURN i.name AS Name, COUNT(*) AS frequency
                ORDER BY frequency DESC LIMIT 10;
// 3
MATCH a=(i:Intermediary)-[e]->(n)
                WHERE type(e) <> "OFFICER_OF" AND type(e) <> "INTERMEDIARY_OF"
                RETURN i.name AS Name, COUNT(*) AS frequency
                ORDER BY frequency DESC LIMIT 10;

// c 

Match path = shortestpath( (f:Address{countries:'Luxembourg'}) â€“[*]-(p:Address{countries:'Cyprus'})) 
with path,f,p
WHERE length(path)>15 AND length(path)<31
return f.node_id,p.node_id, length(path) 
LIMIT 1;

// d
MATCH (i:Intermediary)-[:INTERMEDIARY_OF]->(e:Entity)<-[:OFFICER_OF]-(o:Officer)
    with i, e, o
    MATCH (i)-[:INTERMEDIARY_OF]->(e2:Entity)<-[:OFFICER_OF]-(o)
    WHERE e.name <> e2.name AND e.countries <> e2.countries AND e.country_codes <> e.jurisdiction 
    return i, e, o, e2
    LIMIT 1;
	
	
// e
//Create the Counry node
MATCH (o:Other) WHERE NOT o.countries contains ';' AND EXISTS(o.countries)
WITH o
MERGE (c:Country {name:o.countries})
MERGE (o)-[:IN_COUNTRY]->(c)
ON CREATE SET c.name = o.countries
RETURN DISTINCT(o.countries)


//Execute given query
match p= (:Other)-[:IN_COUNTRY]->(c:Country) where c.name = 'Ireland'  return p

